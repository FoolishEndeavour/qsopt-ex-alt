

# =============================================================================
# Here we read some configurations, you should edit this file instead 
# of this makefile
include Makefile.common

.PHONY: install installdir install-headers install-library install-licence


# TODO: paramterise this
INSTALL = /usr/bin/install
# not used
# install_sh = ${SHELL} ./install.sh

prefix = /usr/local
DESTDIR = ${prefix}
libdir = lib
includedir = include
sharedir = share


install: installdir
	@$(MAKE) -f Makefile.install install-licence install-headers install-library 


installdir:
	@if [ -z "${DESTDIR}" ]; then echo "*** DESTDIR is not set"; exit 2; fi
	@if [ ! -d "${DESTDIR}" ]; then echo "*** DESTDIR=${DESTDIR} is not a directory"; exit 2; fi


install-licence:  ${LICENSE} installdir
	@if [ ! -d "${DESTDIR}/${sharedir}/licenses/${BASE_NAME}" ]; then $(MKDIR_P) "${DESTDIR}/${sharedir}/licenses/${BASE_NAME}" ; fi
	$(INSTALL) -c -p -m 644  "$(LICENSE)"  "$(DESTDIR)/$(sharedir)/licenses/${BASE_NAME}/License.txt"


install-library: $(LIB_DIR)/$(SHARED_LIBRARY) installdir
	@if [ ! -d "${DESTDIR}/${libdir}" ]; then $(MKDIR_P) "${DESTDIR}/${libdir}" ; fi
	$(INSTALL) -c -p -m 755 "$(LIB_DIR)/$(SHARED_LIBRARY)"  "$(DESTDIR)/$(libdir)/"





# Define specific template sources
TEMPLATE_SOURCES_DBL = $(TEMPLATE_SOURCE_FILES:.c=_dbl.c)
TEMPLATE_PUBLIC_HEADERS_DBL = \
	$(TEMPLATE_PUBLIC_HEADER_FILES:.h=_dbl.h)
TEMPLATE_HEADERS_DBL = \
	$(TEMPLATE_PUBLIC_HEADERS_DBL) \
	$(TEMPLATE_PRIVATE_HEADER_FILES:.h=_dbl.h)

$(TEMPLATE_SOURCES_DBL): %_dbl.c: %.c Makefile
	$(AM_V_GEN)$(MKDIR_P) $(@D) && ( \
		echo "/* WARNING! This file was autogenerated from template */" && \
		$(SED) -e 's|EGLPNUM_TYPENAME|dbl|g' -e 's|EGLPNUM_TYPE|double|g' $< ) > $@
$(TEMPLATE_HEADERS_DBL): %_dbl.h: %.h Makefile
	$(AM_V_GEN)$(MKDIR_P) $(@D) && ( \
		echo "/* WARNING! This file was autogenerated from template */" && \
		$(SED) -e 's|EGLPNUM_TYPENAME|dbl|g' -e 's|EGLPNUM_TYPE|double|g' $< ) > $@

TEMPLATE_SOURCES_MPQ = $(TEMPLATE_SOURCE_FILES:.c=_mpq.c)
TEMPLATE_PUBLIC_HEADERS_MPQ = \
	$(TEMPLATE_PUBLIC_HEADER_FILES:.h=_mpq.h)
TEMPLATE_HEADERS_MPQ = \
	$(TEMPLATE_PUBLIC_HEADERS_MPQ) \
	$(TEMPLATE_PRIVATE_HEADER_FILES:.h=_mpq.h)

$(TEMPLATE_SOURCES_MPQ): %_mpq.c: %.c Makefile
	$(AM_V_GEN)$(MKDIR_P) $(@D) && ( \
		echo "/* WARNING! This file was autogenerated from template */" && \
		$(SED) -e 's|EGLPNUM_TYPENAME|mpq|g' -e 's|EGLPNUM_TYPE|mpq_t|g' $< ) > $@
$(TEMPLATE_HEADERS_MPQ): %_mpq.h: %.h Makefile
	$(AM_V_GEN)$(MKDIR_P) $(@D) && ( \
		echo "/* WARNING! This file was autogenerated from template */" && \
		$(SED) -e 's|EGLPNUM_TYPENAME|mpq|g' -e 's|EGLPNUM_TYPE|mpq_t|g' $< ) > $@

TEMPLATE_SOURCES_MPF = $(TEMPLATE_SOURCE_FILES:.c=_mpf.c)
TEMPLATE_PUBLIC_HEADERS_MPF = \
	$(TEMPLATE_PUBLIC_HEADER_FILES:.h=_mpf.h)
TEMPLATE_HEADERS_MPF = \
	$(TEMPLATE_PUBLIC_HEADERS_MPF) \
	$(TEMPLATE_PRIVATE_HEADER_FILES:.h=_mpf.h)

$(TEMPLATE_SOURCES_MPF): %_mpf.c: %.c Makefile
	$(AM_V_GEN)$(MKDIR_P) $(@D) && ( \
		echo "/* WARNING! This file was autogenerated from template */" && \
		$(SED) -e 's|EGLPNUM_TYPENAME|mpf|g' -e 's|EGLPNUM_TYPE|mpf_t|g' $< ) > $@
$(TEMPLATE_HEADERS_MPF): %_mpf.h: %.h Makefile
	$(AM_V_GEN)$(MKDIR_P) $(@D) && ( \
		echo "/* WARNING! This file was autogenerated from template */" && \
		$(SED) -e 's|EGLPNUM_TYPENAME|mpf|g' -e 's|EGLPNUM_TYPE|mpf_t|g' $< ) > $@

# Define complete set of template files
TEMPLATE_FILES = \
	$(TEMPLATE_SOURCES_DBL) $(TEMPLATE_HEADERS_DBL) \
	$(TEMPLATE_SOURCES_MPQ) $(TEMPLATE_HEADERS_MPQ) \
	$(TEMPLATE_SOURCES_MPF) $(TEMPLATE_HEADERS_MPF)



# Library header files
headerdir = $(includedir)/qsopt_ex
header_DATA = \
	$(PUBLIC_HEADER_FILES) \
	$(TEMPLATE_PUBLIC_HEADERS_DBL) \
	$(TEMPLATE_PUBLIC_HEADERS_MPQ) \
	$(TEMPLATE_PUBLIC_HEADERS_MPF)

# Additional files to be distributed. Always run `make distcheck`
# to be sure all necessary files are distributed!
EXTRA_DIST = \
	README.md NEWS.md Doxyfile License.txt \
	$(TEMPLATE_SOURCE_FILES) \
	$(TEMPLATE_PUBLIC_HEADER_FILES) \
	$(TEMPLATE_PRIVATE_HEADER_FILES)





install-headers-oddcases: installdir include/QSopt_ex.h EXact/exact.h EXact/eq_exutil.h
	test ! -d "$(DESTDIR)/$(includedir)"  &&  $(MKDIR_P) "$(DESTDIR)/$(includedir)"
	$(INSTALL) -c -m 644 include/ "$(DESTDIR)/$(includedir)/"


HEADER_FILE = basicdefs.h urandom.h symtab.h reporter.h allocrus.h bgetopt.h zeit.h except.h
TEMPLATE_HEADER := qstruct.h editor.h dstruct.h factor.h lpdefs.h readline.h lpdata.h basis.h dheaps_i.h \
	qsopt.h format.h rawlp.h mps.h price.h priority.h \
	ratio.h read_lp.h read_mps.h simplex.h write_lp.h \
	lib.h 
TEMPLATE_HEADER_FILE = $(foreach base,$(BASES),$(addprefix $(base)_,$(TEMPLATE_HEADER)))
EXACT_HEADER_FILE = exact.h eg_exutil.h





install-headers: installdir $(header_DATA)
	@if [ ! -d "${DESTDIR}/${includedir}" ]; then $(MKDIR_P) "${DESTDIR}/${includedir}" ; fi
	# INTERFACE_HEADER_FILE = QSopt_ex.h
	$(INSTALL) -c -m 644 include/QSopt_ex.h "$(DESTDIR)/$(includedir)/"
	# EXACT_HEADER_FILE = exact.h eg_exutil.h
	$(INSTALL) -c -m 644 include/QSopt_ex.h "$(DESTDIR)/$(includedir)/"


	@list='$(header_DATA)'; test -n "$(headerdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(headerdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(headerdir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(headerdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(headerdir)" || exit $$?; \
	done









